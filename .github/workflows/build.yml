name: Build and Push

on:
  workflow_dispatch:
  push:
    branches:
      - '*'
    tags:
      - 'v*'

jobs:
  build-binaries:
    name: Build binaries
    runs-on: ubuntu-latest
    env: { CGO_ENABLED: 0 }
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with: { go-version: '1.22' }

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Debug PATH
        run: echo $PATH

      - name: Check Go version
        run: go version

      - name: Build binaries
        run: bash ./scripts/build.sh

      - name: Upload Windows amd64
        uses: actions/upload-artifact@v4
        with: 
          name: go2rtc_win64
          path: './.tmp/go2rtc_win64.zip'

      - name: Upload Windows 386
        uses: actions/upload-artifact@v4
        with: 
          name: go2rtc_win32
          path: './.tmp/go2rtc_win32.zip'

      - name: Upload Windows arm64
        uses: actions/upload-artifact@v4
        with: 
          name: go2rtc_win_arm64
          path: './.tmp/go2rtc_win_arm64.zip'

      - name: Upload Linux amd64
        uses: actions/upload-artifact@v4
        with: 
          name: go2rtc_linux_amd64
          path: './.tmp/go2rtc_linux_amd64'

      - name: Upload Linux 386
        uses: actions/upload-artifact@v4
        with: 
          name: go2rtc_linux_i386
          path: './.tmp/go2rtc_linux_i386'

      - name: Upload Linux arm64
        uses: actions/upload-artifact@v4
        with: 
          name: go2rtc_linux_arm64
          path: './.tmp/go2rtc_linux_arm64'

      - name: Upload Linux arm v7
        uses: actions/upload-artifact@v4
        with: 
          name: go2rtc_linux_arm
          path: './.tmp/go2rtc_linux_arm'

      - name: Upload Linux arm v6
        uses: actions/upload-artifact@v4
        with: 
          name: go2rtc_linux_armv6
          path: './.tmp/go2rtc_linux_armv6'

      - name: Upload Linux mipsle
        uses: actions/upload-artifact@v4
        with: 
          name: go2rtc_linux_mipsel
          path: './.tmp/go2rtc_linux_mipsel'

      - name: Upload macOS amd64
        uses: actions/upload-artifact@v4
        with: 
          name: go2rtc_mac_amd64
          path: './.tmp/go2rtc_mac_amd64.zip'

      - name: Upload macOS arm64
        uses: actions/upload-artifact@v4
        with: 
          name: go2rtc_mac_arm64
          path: './.tmp/go2rtc_mac_arm64.zip'
      
      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref,'refs/tags/')
        with:
          generate_release_notes: true
          files: |
            ./.tmp/*

  

  docker-master:
    name: Build docker master
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}},enable=false
            type=match,pattern=v(.*),group=1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: |
            linux/amd64
            linux/386
            linux/arm/v7
            linux/arm64/v8
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  docker-hardware:
    name: Build docker hardware
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta-hw
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}
          flavor: |
            suffix=-hardware,onlatest=true
            latest=auto
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}},enable=false
            type=match,pattern=v(.*),group=1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: hardware.Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-hw.outputs.tags }}
          labels: ${{ steps.meta-hw.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
